// Code generated by MockGen. DO NOT EDIT.
// Source: C:\golang_projects\gophermart\internal\app\service\service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/nasik90/gophermart/internal/app/storage"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AccruePoints mocks base method.
func (m *MockRepository) AccruePoints(ctx context.Context, OrderID int, points float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccruePoints", ctx, OrderID, points)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccruePoints indicates an expected call of AccruePoints.
func (mr *MockRepositoryMockRecorder) AccruePoints(ctx, OrderID, points interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccruePoints", reflect.TypeOf((*MockRepository)(nil).AccruePoints), ctx, OrderID, points)
}

// GetOrderList mocks base method.
func (m *MockRepository) GetOrderList(ctx context.Context, login string) (*[]storage.OrderData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderList", ctx, login)
	ret0, _ := ret[0].(*[]storage.OrderData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderList indicates an expected call of GetOrderList.
func (mr *MockRepositoryMockRecorder) GetOrderList(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderList", reflect.TypeOf((*MockRepository)(nil).GetOrderList), ctx, login)
}

// GetUserBalance mocks base method.
func (m *MockRepository) GetUserBalance(ctx context.Context, login string) (*storage.UserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, login)
	ret0, _ := ret[0].(*storage.UserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockRepositoryMockRecorder) GetUserBalance(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockRepository)(nil).GetUserBalance), ctx, login)
}

// GetWithdrawals mocks base method.
func (m *MockRepository) GetWithdrawals(ctx context.Context, login string) (*[]storage.Withdrawals, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", ctx, login)
	ret0, _ := ret[0].(*[]storage.Withdrawals)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockRepositoryMockRecorder) GetWithdrawals(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockRepository)(nil).GetWithdrawals), ctx, login)
}

// NewAndProcessingOrders mocks base method.
func (m *MockRepository) NewAndProcessingOrders(ctx context.Context) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAndProcessingOrders", ctx)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAndProcessingOrders indicates an expected call of NewAndProcessingOrders.
func (mr *MockRepositoryMockRecorder) NewAndProcessingOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAndProcessingOrders", reflect.TypeOf((*MockRepository)(nil).NewAndProcessingOrders), ctx)
}

// SaveNewOrder mocks base method.
func (m *MockRepository) SaveNewOrder(ctx context.Context, orderNumber int, login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNewOrder", ctx, orderNumber, login)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNewOrder indicates an expected call of SaveNewOrder.
func (mr *MockRepositoryMockRecorder) SaveNewOrder(ctx, orderNumber, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNewOrder", reflect.TypeOf((*MockRepository)(nil).SaveNewOrder), ctx, orderNumber, login)
}

// SaveNewUser mocks base method.
func (m *MockRepository) SaveNewUser(ctx context.Context, user, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNewUser", ctx, user, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNewUser indicates an expected call of SaveNewUser.
func (mr *MockRepositoryMockRecorder) SaveNewUser(ctx, user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNewUser", reflect.TypeOf((*MockRepository)(nil).SaveNewUser), ctx, user, password)
}

// SaveStatus mocks base method.
func (m *MockRepository) SaveStatus(ctx context.Context, orderID, statusID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveStatus", ctx, orderID, statusID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveStatus indicates an expected call of SaveStatus.
func (mr *MockRepositoryMockRecorder) SaveStatus(ctx, orderID, statusID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveStatus", reflect.TypeOf((*MockRepository)(nil).SaveStatus), ctx, orderID, statusID)
}

// UserIsValid mocks base method.
func (m *MockRepository) UserIsValid(ctx context.Context, login, password string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserIsValid", ctx, login, password)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserIsValid indicates an expected call of UserIsValid.
func (mr *MockRepositoryMockRecorder) UserIsValid(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserIsValid", reflect.TypeOf((*MockRepository)(nil).UserIsValid), ctx, login, password)
}

// WithdrawPoints mocks base method.
func (m *MockRepository) WithdrawPoints(ctx context.Context, login string, OrderID int, points float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawPoints", ctx, login, OrderID, points)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawPoints indicates an expected call of WithdrawPoints.
func (mr *MockRepositoryMockRecorder) WithdrawPoints(ctx, login, OrderID, points interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawPoints", reflect.TypeOf((*MockRepository)(nil).WithdrawPoints), ctx, login, OrderID, points)
}
